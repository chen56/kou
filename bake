#!/usr/bin/env bash

# On Mac OS, readlink -f doesn't work, so use._real_path get the real path of the file
_real_path() (
  cd "$(dirname "$1")"
  file="$PWD/$(basename "$1")"
  while [[ -L "$file" ]]; do
    file="$(readlink "$file")"
    cd -P "$(dirname "$file")"
    file="$PWD/$(basename "$file")"
  done
  echo "$file"
)
SCRIPT_PATH="$(_real_path "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
SCRIPT_FILE="$(basename "$SCRIPT_PATH")"

_getBake(){ curl -L -O https://github.com/chen56/note/raw/main/bake.bash ; }
if ! [[ -f "$SCRIPT_DIR/bake.bash" ]]; then
  _getBake
fi

# include common script
source "$SCRIPT_DIR/bake.bash"

declare -A projects

projects=(
    ["app"]="$SCRIPT_DIR/app"
    ["kous"]="$SCRIPT_DIR/kous"
)


####################################################################################
# app script
####################################################################################

# run一条命令，先print上下文信息，再执行
# Usage: run <some cmd>
# Example:
# ------------------------------------
# $ ./bake run pwd
# /Users/x/git/younpc/bake:733 -> bake.go() ▶︎【pwd】
# /Users/x/git/younpc
# ------------------------------------
run() {
  local caller_line=$(caller 0 | awk '{print $1}')
  local project
  project=$(basename "$PWD")
  #  [[ "$PWD" == "$SCRIPT_DIR" ]] && project="_root"
  echo "$SCRIPT_PATH:$caller_line -> ${FUNCNAME[1]} ▶︎【$@】"
  "$@"
  return $?
}

##########################################
# app cmd script
# 应用的命令脚本
##########################################

bake.cmd --cmd _root \
             --usage "./$SCRIPT_FILE [cmd] [opts] [args...]" \
             --summary "younpc build cli." \
             --description "$( cat <<-EOF

 ___  _        _    _                    _  _       _
| __|| | _  _ | |_ | |_  ___  _ _       | \| | ___ | |_  ___
| _| | || || ||  _||  _|/ -_)| '_|      | .  |/ _ \|  _|/ -_)
|_|  |_| \_._| \__| \__|\___||_|        |_|\_|\___/ \__|\___|

younpc build tools.
https://github.com/chen56/note

Examples:
 ./${SCRIPT_FILE}                          # same as  './${SCRIPT_FILE} -h'
 ./${SCRIPT_FILE} -h                       # show all commands help
 ./${SCRIPT_FILE} -h --debug               # show all commands help , include internal function

 ./${SCRIPT_FILE}  test                    # test all projects
 ./${SCRIPT_FILE}  build                   # defalut build == flutter build web --web-renderer html
 ./${SCRIPT_FILE}  preview                 # defalut preview == run server at web build
 ./${SCRIPT_FILE}  test                    # test all projects

 ./${SCRIPT_FILE}  p -h                    # show all mono project commands help
 ./${SCRIPT_FILE}  p note pwd              # run "pwd" on note project dir
 ./${SCRIPT_FILE}  p all pwd               # run "pwd" on all mono projects
 ./${SCRIPT_FILE}  p all flutter pub get   # run "flutter pub get" on all mono projects

EOF
  )"


#   flutter_note flutter create --platforms=macos .
init() {
  run git lfs install
}

# 临时函数实验用
temp(){
  run pwd
}

bake.cmd --cmd p --summary "<mono>  project set" --usage "Usage: ./$SCRIPT_FILE p <sub_cmd>"

bake.cmd --cmd p.all --summary "<mono>  run cmd on all mono project" --usage "Usage: ./$SCRIPT_FILE all [any command]"
all() {
  for name in "${!projects[@]}"; do
    local path;
    path="${projects[name]}"
    cd "path" && run "$@"
  done
}

app.install(){              cd "${projects[app]}" && run flutter pub get ; }
app.clean(){                cd "${projects[app]}" && run flutter clean ; }
app.dev(){                  cd "${projects[app]}" && run flutter run --no-pub --device-id macos ; }
app.build(){                cd "${projects[app]}" && run flutter build macos --release --tree-shake-icons "$@";  }
app.preview(){              cd "${projects[app]}" && run open "${projects[app]}/build/macos/Build/Products/Release/younpc.app" ; }

kous(){        p.run kous "$@" ; }
kous.clean(){  echo "nothing clean" ; }
kous.install(){    p.kous go mod tidy    ; }

install(){
  _getBake
  for project in "${!projects[@]}"; do
    func="p.$project.install"
    # 命令存在就执行
    if declare -F "$func" | grep "$func" &>/dev/null  2>&1; then $func ; fi
  done
}

clean(){
  for project in "${!projects[@]}"; do
    func="p.$project.clean"
    # 命令存在就执行
    if declare -F "$func" | grep "$func" &>/dev/null  2>&1; then $func ; fi
  done
}

####################################################
# app entry script & _root cmd
####################################################
bake.go "$@"