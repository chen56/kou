#!/usr/bin/env bash

# On Mac OS, readlink -f doesn't work, so use._real_path get the real path of the file
_real_path() (
  cd "$(dirname "$1")"
  file="$PWD/$(basename "$1")"
  while [[ -L "$file" ]]; do
    file="$(readlink "$file")"
    cd -P "$(dirname "$file")"
    file="$PWD/$(basename "$file")"
  done
  echo "$file"
)
SCRIPT_PATH="$(_real_path "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
SCRIPT_FILE="$(basename "$SCRIPT_PATH")"

_getBake(){ curl -L -O https://github.com/chen56/note/raw/main/bake.bash ; }
if ! [[ -f "$SCRIPT_DIR/bake.bash" ]]; then
  _getBake
fi

# include common script
source "$SCRIPT_DIR/bake.bash"

declare -A projects

projects=(
    ["kouc"]="$SCRIPT_DIR/kou_macos"
    ["kous"]="$SCRIPT_DIR/kous"
)


####################################################################################
# app script
####################################################################################
# print first, then _exec
_exec() {
  local project
  project=$(basename "$PWD")
  #  [[ "$PWD" == "$SCRIPT_DIR" ]] && project="_root"
  echo "$project -> ${FUNCNAME[1]}() ▶︎【$*】"
  "$@"
  return $?
}

##########################################
# app cmd script
# 应用的命令脚本
##########################################

bake.cmd --cmd _root \
             --usage "./$SCRIPT_FILE [cmd] [opts] [args...]" \
             --summary "flutter-note build cli." \
             --description "$( cat <<-EOF

 ___  _        _    _                    _  _       _
| __|| | _  _ | |_ | |_  ___  _ _       | \| | ___ | |_  ___
| _| | || || ||  _||  _|/ -_)| '_|      | .  |/ _ \|  _|/ -_)
|_|  |_| \_._| \__| \__|\___||_|        |_|\_|\___/ \__|\___|

flutter-note build tools.
https://github.com/chen56/note

Examples:
 ./${SCRIPT_FILE}                          # same as  './${SCRIPT_FILE} -h'
 ./${SCRIPT_FILE} -h                       # show all commands help
 ./${SCRIPT_FILE} -h --debug               # show all commands help , include internal function

 ./${SCRIPT_FILE}  test                    # test all projects
 ./${SCRIPT_FILE}  build                   # defalut build == flutter build web --web-renderer html
 ./${SCRIPT_FILE}  preview                 # defalut preview == run server at web build
 ./${SCRIPT_FILE}  test                    # test all projects

 ./${SCRIPT_FILE}  p -h                    # show all mono project commands help
 ./${SCRIPT_FILE}  p note pwd              # run "pwd" on note project dir
 ./${SCRIPT_FILE}  p all pwd               # run "pwd" on all mono projects
 ./${SCRIPT_FILE}  p all flutter pub get   # run "flutter pub get" on all mono projects

EOF
  )"


#   flutter_note flutter create --platforms=macos .
init() {
  run git lfs install
}

bake.cmd --cmd p --summary "<mono>  project set" --usage "Usage: ./$SCRIPT_FILE p <sub_cmd>"
#p(){ echo "use './$SCRIPT_FILE p -h' see sub commands, there are all projects "; }

bake.cmd --cmd p.all --summary "<mono>  run cmd on all mono project" --usage "Usage: ./$SCRIPT_FILE all [any command]"
p.all() {
  for name in "${!projects[@]}"; do
    local path;
    path="${projects[name]}"
    cd "path" && _exec "$@"
  done
}

p.one(){
  local project;
  project="$1"
  shift;
  cd "${projects[$project]}" && _exec "$@"
}


p.kouc(){         p.one kouc "$@" ; }
p.kouc.clean(){   p.kouc flutter clean ; }
p.kouc.get(){     p.kouc flutter pub get ; }
p.kous(){         p.one kous "$@" ; }
p.kous.clean(){   echo "nothing clean" ; }
p.kous.get(){     p.kous go mod tidy    ; }

get(){
  _getBake
  for project in "${!projects[@]}"; do
    func="p.$project.get"
    # 命令存在就执行
    if declare -F "$func" | grep "$func" &>/dev/null  2>&1; then $func ; fi
  done
}

clean(){
  for project in "${!projects[@]}"; do
    func="p.$project.clean"
    # 命令存在就执行
    if declare -F "$func" | grep "$func" &>/dev/null  2>&1; then $func ; fi
  done
}


####################################################
# app entry script & _root cmd
####################################################
bake.go "$@"