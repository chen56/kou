#!/usr/bin/env bash

# On Mac OS, readlink -f doesn't work, so use._real_path get the real path of the file
_real_path() (
  cd "$(dirname "$1")"
  declare file="$PWD/$(basename "$1")"
  while [[ -L "$file" ]]; do
    file="$(readlink "$file")"
    cd -P "$(dirname "$file")"
    file="$PWD/$(basename "$file")"
  done
  echo "$file"
)
SCRIPT_PATH="$(realpath_mac "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
SCRIPT_FILE="$(basename "$SCRIPT_PATH")"

_install_bake(){
  mkdir -p "$SCRIPT_DIR/vendor"
  echo "$SCRIPT_PATH -> _install_bake ▶︎【curl -o $SCRIPT_DIR/bake.bash https://github.com/chen56/note/raw/main/bake.bash】"
  curl -L -o  "$SCRIPT_DIR/vendor/bake.bash" https://github.com/chen56/note/raw/main/bake.bash ;
}
if ! [[ -f "$SCRIPT_DIR/vendor/bake.bash" ]]; then
  _install_bake
fi

# include common script
source "$SCRIPT_DIR/vendor/bake.bash"

declare -A pkgs=(
    ["app"]="$SCRIPT_DIR/app"
    ["kous"]="$SCRIPT_DIR/kous"
    ["app_devtools"]="$SCRIPT_DIR/app/packages/app_devtools"
)

##########################################
# app cmd script
# 应用的命令脚本
##########################################

bake.cmd --cmd _root \
         --usage "./$SCRIPT_FILE [cmd] [opts] [args...]" \
         --summary "younpc build cli." \
         --description "$( cat <<-EOF

younpc build tools.
https://github.com/chen56/younpc

Examples:
 ./${SCRIPT_FILE}                # same as  './${SCRIPT_FILE} -h'
 ./${SCRIPT_FILE} --help         # show all commands help
 ./${SCRIPT_FILE} -h --debug     # show all commands help , include internal function

 ./${SCRIPT_FILE}  test          # test all pkgs
 ./${SCRIPT_FILE}  build         # defalut build == flutter build web --web-renderer html
 ./${SCRIPT_FILE}  preview       # defalut preview == run server at web build
 ./${SCRIPT_FILE}  test          # test all pkgs

 ./${SCRIPT_FILE}  all -h        # show all mono pkg commands help
 ./${SCRIPT_FILE}  all ls        # run "ls" on all mono pkgs
 ./${SCRIPT_FILE}  app ls        # run "ls" on app pkg dir

EOF
  )"


# run一条命令，先print上下文信息，再执行
# Usage: run <some cmd>
# Example:
# ------------------------------------
# $ ./bake run pwd
# /Users/x/git/younpc/bake:733 -> bake.go() ▶︎【pwd】
# /Users/x/git/younpc
# ------------------------------------
run() {
  local caller_line=$(caller 0 | awk '{print $1}')
  echo "$SCRIPT_PATH:$caller_line -> ${FUNCNAME[1]} ▶︎【$@】"
  "$@"
  return $?
}


## if function not exist return 1;
# Usage: _exist_func <function>
# Example: _exist_func app.build
#         => return 0
_exist_func(){
  local func="$1"
  if ! ( declare -F "$func" | grep "$func" &>/dev/null  2>&1; ) then
    return 1;
  fi
}

# 临时函数实验用
temp(){
  run pwd
}

bake.cmd --cmd p --summary "<mono>  pkg set" --usage "Usage: ./$SCRIPT_FILE p <sub_cmd>"

bake.cmd --cmd p.all --summary "<mono>  run cmd on all mono pkg" --usage "Usage: ./$SCRIPT_FILE all [any command]"
all() { for name in "${!pkgs[@]}"; do cd "${pkgs[name]}" && run "$@"; done ; }

app.run(){      cd "${pkgs[app]}" && run "$@" ; }
app.install(){  app.run flutter pub get ; }
app.clean(){    app.run flutter clean ; }
app.dev(){      app.run flutter run --no-pub --device-id macos ; }
app.build(){    app.run flutter build macos --release --tree-shake-icons "$@";  }
app.preview(){  app.run open "${pkgs[app]}/build/macos/Build/Products/Release/younpc.app" ; }

# app_devtools暂时搁置，目前没啥用，发现只能搞一个web页面以iframe的模式挂在devtools下，无法调用操作系统api

app_devtools.run(){     cd "${pkgs[app_devtools]}" && run "$@" ; }
app_devtools.install(){ cd "${pkgs[app_devtools]}" && run flutter pub get ; }
app_devtools.dev(){     cd "${pkgs[app_devtools]}" && run flutter run -d Chrome --dart-define=use_simulated_environment=true ; }
app_devtools.build(){   cd "${pkgs[app_devtools]}" && dart run devtools_extensions build_and_copy --source=. --dest="${pkgs[app_devtools]}/extension/devtools" ; }

kous.run(){        cd "${pkgs[kous]}" && run "$@" ; }
kous.clean(){      kous.run "nothing clean" ; }
kous.install(){    kous.run go mod tidy    ; }

install(){
  _install_bake
  run git lfs install
  for pkg in "${!pkgs[@]}"; do
    if _exist_func "$pkg.install" ; then "$pkg.install" ; fi
  done
}

clean(){
  for pkg in "${!pkgs[@]}"; do
    if _exist_func "$pkg.clean" ; then "$pkg.clean" ; fi
  done
}

####################################################
# app entry script & _root cmd
####################################################
bake.go "$@"

